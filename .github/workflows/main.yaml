---
name: Main
on:
  workflow_dispatch: {}
  push:
    branches: [main]
env:
  DOCKER_BUILDKIT: "1"
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sample-app
  CLUSTER_NAME: raki-sample-org-production-apps
  HELM_PATH: k8s/helm/web-service
  NAMESPACE: sample-app
  ARGO_ROLLOUT_NAME: sample-app
  INFRASTRUCTURE_REPO: Raki-Sample-Organization/infrastructure
  INFRASTRUCTURE_EPHEMERAL_PATH: infrastructure/k8s/overlays/ephemeral/sample-app
jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@master
      - uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: '17'
      - name: Run database container
        run: docker-compose up -d postgres
      - name: Run unit tests
        run: make build-app-image
  build_image:
    name: Build image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write
      contents: write
    outputs:
      tag: ${{ steps.tag_version.outputs.new_tag }}
      registry: ${{ steps.login_ecr.outputs.registry }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@master
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: SampleAppDockerBuild
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1
      - uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: '17'
      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag_version.outputs.new_tag }}
        run: make build-push-images
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build_image
    env:
      IMAGE_TAG: ${{ needs.build_image.outputs.tag }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@master
      - name: Run integration tests (Docker)
        if: ${{ ! contains(github.event.commits[0].message, '[EPHEMERAL]') }}
        run: make run-integration-tests
      - name: Checkout infrastructure repo
        if: contains(github.event.commits[0].message, '[EPHEMERAL]')
        uses: actions/checkout@v3
        with:
          repository: ${{ env.INFRASTRUCTURE_REPO }}
          token: ${{ secrets.GH_REPO_VIEWER_TOKEN }}
          path: infrastructure
      - name: Configure AWS Credentials
        if: contains(github.event.commits[0].message, '[EPHEMERAL]')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: SampleAppIntegrationTests
      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Connect to EKS Cluster
        if: contains(github.event.commits[0].message, '[EPHEMERAL]')
        run: aws eks update-kubeconfig --name $CLUSTER_NAME 2>/dev/null
      - if: contains(github.event.commits[0].message, '[EPHEMERAL]')
        uses: supplypike/setup-bin@v1
        with:
          uri: https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          name: kubectl-argo-rollouts
          version: latest
      - name: Create ephemeral environment
        if: contains(github.event.commits[0].message, '[EPHEMERAL]')
        run: make provision-ephemeral-environment
      - name: Run integration tests
        if: contains(github.event.commits[0].message, '[EPHEMERAL]')
        run: make deploy run-integration-tests-helm NAMESPACE="$NAMESPACE-ephemeral" ECR_REGISTRY="${{ steps.login_ecr.outputs.registry }}"
      - name: Terminate ephemeral environment
        if: always() && contains(github.event.commits[0].message, '[EPHEMERAL]')
        run: make terminate-ephemeral-environment
  deploy_to_production:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: [build_image, integration_tests]
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@master
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: SampleAppIntegrationTests
      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Connect to cluster
        run: aws eks update-kubeconfig --name $CLUSTER_NAME 2>/dev/null
      - uses: supplypike/setup-bin@v1
        with:
          uri: https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          name: kubectl-argo-rollouts
          version: latest
      - name: Restart pods
        run: kubectl-argo-rollouts -n $NAMESPACE restart $ARGO_ROLLOUT_NAME || true
      - name: Set deployment strategy
        id: deployment_strategy
        run: |-
          DEPLOYMENT_STRATEGY=rollingUpdate
          if [[ "${{ contains(github.event.commits[0].message, '[BLUE-GREEN]') }}" == "true" ]]; then
            DEPLOYMENT_STRATEGY=blueGreen
          elif [[ "${{ contains(github.event.commits[0].message, '[CANARY]') }}" == "true" ]]; then
            DEPLOYMENT_STRATEGY=canary
          elif [[ "${{ contains(github.event.commits[0].message, '[AB]') }}" == "true" ]]; then
            DEPLOYMENT_STRATEGY=abTesting
          fi
          echo "::set-output name=value::$DEPLOYMENT_STRATEGY"
      - name: Deploy application
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.build_image.outputs.tag }}
          DEPLOYMENT_STRATEGY: ${{ steps.deployment_strategy.outputs.value }}
        run: make deploy
